{"version":3,"sources":["CardService.js","components/Card.jsx","components/List.jsx","components/Board.jsx","App.jsx","serviceWorker.js","index.js"],"names":["defaultBoard","id","title","cards","text","emptyBoard","currentBoard","updateList","updatedList","Promise","resolve","reject","hasFoundList","map","list","Object","objectSpread","localStorage","setItem","JSON","stringify","Status","Card","_ref","data","_useState","useState","_useState2","slicedToArray","card","setCard","_useState3","_useState4","isEditing","setIsEditing","handleSubmit","updatedCard","hasFoundCard","tmp","then","resp","catch","console","error","react_default","a","createElement","className","onClick","onBlur","type","name","autoFocus","value","onChange","e","defineProperty","target","onKeyPress","key","Fragment","List","props","setList","log","components_Card","newID","forEach","newCards","concat","toConsumableArray","Board","board","setboard","useEffect","getItem","parse","style","marginTop","clear","window","location","components_List","Footer","href","App","components_Board","App_Footer","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.8effed54.chunk.js","sourcesContent":["// CardService - helper file to handle card data between components\n\nconst defaultBoard = [\n    {\n        id: 1,\n        title: \"col 1\",\n        cards: [{ id: 1, text: \"foo\" }, { id: 2, text: \"bar\" }]\n    },\n    {\n        id: 2,\n        title: \"col 2\",\n        cards: [\n            { id: 3, text: \"test\" },\n            { id: 4, text: \"fourth thing\" },\n            { id: 5, text: \"blah\" },\n            { id: 6, text: \"dfdsf\" }\n        ]\n    },\n    {\n        id: 3,\n        title: \"col 3\",\n        cards: [\n            { id: 7, text: \"xsdfdsf\" },\n            { id: 8, text: \"sfsdff\" },\n            { id: 9, text: \"test3\" }\n        ]\n    }\n];\n\nexport const emptyBoard = [\n    {\n        id: 1,\n        title: \"Change me!\",\n        cards: [\n            {\n                id: 1,\n                text: \"...\"\n            }\n        ]\n    }\n];\n\nlet currentBoard = [];\n\nexport const getBoard = () => {\n    return new Promise((resolve, reject) => {\n        if (localStorage.getItem(\"board\")) {\n            currentBoard = JSON.parse(localStorage.getItem(\"board\"));\n        } else {\n            currentBoard = defaultBoard;\n            localStorage.setItem(\"board\", JSON.stringify(defaultBoard));\n        }\n        resolve(currentBoard);\n    });\n};\n\nexport const updateCard = updatedCard => {\n    return new Promise((resolve, reject) => {\n        let hasFoundCard = false;\n        currentBoard = currentBoard.map(list => {\n            const tmp = list.cards.map(card => {\n                if (card.id === updatedCard.id) {\n                    card = { ...updatedCard };\n                    hasFoundCard = true;\n                }\n                return card;\n            });\n            return { ...list, cards: tmp };\n        });\n        if (hasFoundCard) {\n            localStorage.setItem(\"board\", JSON.stringify(currentBoard));\n            resolve({ Status: \"Updated\" });\n        } else {\n            reject({ Status: \"Could not update\" });\n        }\n    });\n};\n\nexport const updateList = updatedList => {\n    return new Promise((resolve, reject) => {\n        let hasFoundList = false;\n        currentBoard = currentBoard.map(list => {\n            if (list.id === updatedList.id) {\n                list = { ...updatedList };\n                hasFoundList = true;\n            }\n            return list;\n        });\n        if (hasFoundList) {\n            localStorage.setItem(\"board\", JSON.stringify(currentBoard));\n            resolve({ Status: \"Updated\" });\n        } else {\n            reject({ Status: \"Could not update\" });\n        }\n    });\n};\n\nexport const getNextCardID = () => {\n    return new Promise((resolve, reject) => {\n        let newID = -1;\n        currentBoard.forEach(list => {\n            const tmp = list.cards.forEach(card => {\n                if (newID <= card.id) {\n                    newID = card.id + 1;\n                }\n            });\n        });\n        resolve(newID);\n    });\n};\n","import React, { useState } from \"react\";\n\nimport { updateCard } from \"../CardService\";\n\nconst Card = ({ data }) => {\n    const [card, setCard] = useState(data);\n    const [isEditing, setIsEditing] = useState(false);\n\n    const handleChange = e => {\n        setCard({ ...card, [e.target.name]: e.target.value });\n    };\n\n    const handleSubmit = () => {\n        setIsEditing(false);\n        updateCard(card)\n            .then(resp => {\n                // console.log(resp);\n            })\n            .catch(resp => console.error(resp));\n    };\n\n    return (\n        <div\n            className=\"card\"\n            onClick={() => setIsEditing(true)}\n            onBlur={() => handleSubmit()}\n        >\n            {isEditing ? (\n                <input\n                    type=\"text\"\n                    name=\"text\"\n                    autoFocus\n                    value={card.text}\n                    onChange={handleChange}\n                    onKeyPress={e => {\n                        if (e.key === \"Enter\") handleSubmit();\n                    }}\n                />\n            ) : (\n                <>\n                    <div className=\"card-header\">{data.id}</div>\n                    <p className=\"card-body\">{data.text}</p>\n                </>\n            )}\n        </div>\n    );\n};\n\nexport default Card;\n","import React, { useState } from \"react\";\n\nimport Card from \"./Card\";\nimport { updateList, getNextCardID } from \"../CardService\";\n\nconst List = props => {\n    const [list, setList] = useState(props.list);\n    const [isEditing, setIsEditing] = useState(false);\n\n    const handleSubmit = () => {\n        setIsEditing(false);\n        updateList(list)\n            .then(resp => {\n                console.log(resp);\n            })\n            .catch(resp => console.error(resp));\n    };\n\n    return (\n        <div className=\"list\">\n            {/* title */}\n            {isEditing ? (\n                <input\n                    type=\"text\"\n                    name=\"title\"\n                    autoFocus\n                    value={list.title}\n                    onChange={e =>\n                        setList({ ...list, [e.target.name]: e.target.value })\n                    }\n                    onBlur={() => handleSubmit()}\n                    onKeyPress={e => {\n                        if (e.key === \"Enter\") handleSubmit();\n                    }}\n                />\n            ) : (\n                <p className=\"list-title\" onClick={() => setIsEditing(true)}>\n                    {list.title}\n                </p>\n            )}\n            {/* cards */}\n            {props.cards.map(card => (\n                <Card key={card.id} data={card} />\n            ))}\n            <button\n                className=\"btn add-card\"\n                onClick={e => {\n                    getNextCardID().then(resp => {\n                        const newCards = [\n                            ...props.cards,\n                            {\n                                id: resp,\n                                text: \"\"\n                            }\n                        ];\n                        setList({ ...list, cards: newCards });\n                        updateList({ ...list, cards: newCards }).then(resp => {\n                            // console.log(resp);\n                        });\n                    });\n                }}\n            >\n                Add a new Card\n            </button>\n        </div>\n    );\n};\n\nexport default List;\n","import React, { useState, useEffect } from \"react\";\n\nimport List from \"./List\";\nimport { getBoard, emptyBoard } from \"../CardService\";\n\nconst Board = () => {\n    const [board, setboard] = useState(null);\n\n    useEffect(() => {\n        getBoard().then(resp => {\n            setboard(resp);\n        });\n    }, [board]);\n\n    return (\n        // <div className=\"board\">\n        <div className=\"board-container\">\n            {board && (\n                <>\n                    <h1 className=\"text-center\" style={{ marginTop: \"0\" }}>\n                        This is the board\n                    </h1>\n                    <button\n                        className=\"btn\"\n                        onClick={() => {\n                            localStorage.clear();\n                            window.location = \".\";\n                        }}\n                    >\n                        Reset the Board\n                    </button>\n\n                    {/* TODO: make this a promise */}\n                    <button\n                        className=\"btn\"\n                        onClick={() => {\n                            localStorage.setItem(\n                                \"board\",\n                                JSON.stringify(emptyBoard)\n                            );\n                            window.location = \".\";\n                        }}\n                    >\n                        Clear the Board\n                    </button>\n\n                    <div className=\"board\">\n                        {board.map(list => (\n                            <List\n                                key={list.id}\n                                cards={list.cards}\n                                list={list}\n                            />\n                        ))}\n                    </div>\n                </>\n            )}\n        </div>\n    );\n};\n\nexport default Board;\n","import React from \"react\";\n\nimport Board from \"./components/Board\";\n\nconst Footer = () => {\n    return (\n        <div className=\"footer\">\n            <p>Copywrite &copy;2019 Sebastian Safari</p>\n            <a href=\"https://github/com/ssebs\">GitHub</a>\n        </div>\n    );\n};\n\nfunction App() {\n    return (\n        <>\n            <Board />\n            <Footer />\n        </>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}