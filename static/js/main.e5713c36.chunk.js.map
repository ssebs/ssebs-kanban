{"version":3,"sources":["CardService.js","components/Card.jsx","components/List.jsx","components/Board.jsx","App.jsx","serviceWorker.js","index.js"],"names":["defaultBoard","id","title","cards","text","emptyBoard","currentBoard","resetBoard","resetType","Promise","resolve","reject","localStorage","setItem","JSON","stringify","Status","updateList","updatedList","hasFoundList","map","list","Object","objectSpread","getNextCardID","newID","forEach","card","Card","props","_useState","useState","data","_useState2","slicedToArray","setCard","_useState3","_useState4","isEditing","setIsEditing","handleSubmit","updatedCard","hasFoundCard","tmp","then","resp","console","log","provided","innerRef","react_default","a","createElement","assign","className","onDoubleClick","onBlur","dragHandleProps","draggableProps","ref","type","name","autoFocus","value","onChange","e","defineProperty","target","onKeyPress","key","Fragment","List","setList","catch","error","react_beautiful_dnd_esm","onDragEnd","result","destination","onClick","droppableId","droppableProps","draggableId","index","components_Card","placeholder","newCards","concat","toConsumableArray","Board","board","setboard","useEffect","getItem","parse","style","marginTop","color","window","confirm","cardID","listID","updatedBoard","newList","components_List","Footer","href","App","components_Board","App_Footer","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e5713c36.chunk.js","sourcesContent":["// CardService - helper file to handle card data between components\n\nconst defaultBoard = [\n    {\n        id: 1,\n        title: \"To Do\",\n        cards: [{ id: 1, text: \"Add tests\" }, { id: 2, text: \"Make cleaner\" }]\n    },\n    {\n        id: 2,\n        title: \"In Progress\",\n        cards: [\n            { id: 3, text: \"Work on styling\" },\n            { id: 4, text: \"Figure out the buttons\" },\n            { id: 5, text: \"Add Delete functionality\" },\n            { id: 6, text: \"Refactor\" }\n        ]\n    },\n    {\n        id: 3,\n        title: \"Completed\",\n        cards: [\n            { id: 7, text: \"Get CI working\" },\n            { id: 8, text: \"Start on project\" },\n            { id: 9, text: \"Save to localStorage\" }\n        ]\n    }\n];\n\nexport const emptyBoard = [\n    {\n        id: 1,\n        title: \"Change me!\",\n        cards: [\n            {\n                id: 1,\n                text: \"...\"\n            }\n        ]\n    }\n];\n\nlet currentBoard = [];\n\nexport const getBoard = () => {\n    return new Promise((resolve, reject) => {\n        if (localStorage.getItem(\"board\")) {\n            currentBoard = JSON.parse(localStorage.getItem(\"board\"));\n        } else {\n            currentBoard = defaultBoard;\n            localStorage.setItem(\"board\", JSON.stringify(defaultBoard));\n        }\n        resolve(currentBoard);\n    });\n};\n\nexport const resetBoard = resetType => {\n    // resetType can be \"default\", or \"empty\"\n    return new Promise((resolve, reject) => {\n        if (resetType === \"default\") {\n            localStorage.setItem(\"board\", JSON.stringify(defaultBoard));\n        } else if (resetType === \"empty\") {\n            localStorage.setItem(\"board\", JSON.stringify(emptyBoard));\n        } else {\n            reject({ Status: \"Could not reset board\" });\n        }\n        resolve({ Status: \"Board reset\" });\n    });\n};\n\nexport const updateBoard = updatedBoard => {\n    return new Promise(resolve => {\n        localStorage.setItem(\"board\", JSON.stringify(updatedBoard));\n        resolve({ Status: \"Updated Board\" });\n    });\n};\n\nexport const updateCard = updatedCard => {\n    return new Promise((resolve, reject) => {\n        let hasFoundCard = false;\n        currentBoard = currentBoard.map(list => {\n            const tmp = list.cards.map(card => {\n                if (card.id === updatedCard.id) {\n                    card = { ...updatedCard };\n                    hasFoundCard = true;\n                }\n                return card;\n            });\n            return { ...list, cards: tmp };\n        });\n        if (hasFoundCard) {\n            localStorage.setItem(\"board\", JSON.stringify(currentBoard));\n            resolve({ Status: \"Updated Card\" });\n        } else {\n            reject({ Status: \"Could not update\" });\n        }\n    });\n};\n\nexport const updateList = updatedList => {\n    return new Promise((resolve, reject) => {\n        let hasFoundList = false;\n        currentBoard = currentBoard.map(list => {\n            if (list.id === updatedList.id) {\n                list = { ...updatedList };\n                hasFoundList = true;\n            }\n            return list;\n        });\n        if (hasFoundList) {\n            localStorage.setItem(\"board\", JSON.stringify(currentBoard));\n            resolve({ Status: \"Updated List\" });\n        } else {\n            reject({ Status: \"Could not update\" });\n        }\n    });\n};\n\nexport const getNextCardID = () => {\n    return new Promise(resolve => {\n        let newID = -1;\n        currentBoard.forEach(list => {\n            list.cards.forEach(card => {\n                if (newID <= card.id) {\n                    newID = card.id + 1;\n                }\n            });\n        });\n        resolve(newID);\n    });\n};\n\nexport const getNextListID = () => {\n    return new Promise(resolve => {\n        let newID = -1;\n        currentBoard.forEach(list => {\n            if (newID <= list.id) {\n                newID = list.id + 1;\n            }\n        });\n        resolve(newID);\n    });\n};\n","import React, { useState } from \"react\";\n\nimport { updateCard } from \"../CardService\";\n\nconst Card = props => {\n    const [card, setCard] = useState(props.data);\n    const [isEditing, setIsEditing] = useState(false);\n\n    const handleChange = e => {\n        setCard({ ...card, [e.target.name]: e.target.value });\n    };\n\n    const handleSubmit = () => {\n        setIsEditing(false);\n        updateCard(card).then(resp => {\n            console.log(resp);\n        });\n    };\n\n    const { provided, innerRef } = props;\n\n    return (\n        <div\n            className=\"card\"\n            onDoubleClick={() => setIsEditing(true)}\n            onBlur={() => handleSubmit()}\n            {...provided.dragHandleProps}\n            {...provided.draggableProps}\n            ref={innerRef}\n        >\n            {isEditing ? (\n                <input\n                    type=\"text\"\n                    name=\"text\"\n                    autoFocus\n                    value={card.text}\n                    onChange={handleChange}\n                    onKeyPress={e => {\n                        if (e.key === \"Enter\") handleSubmit();\n                    }}\n                />\n            ) : (\n                <>\n                    <div className=\"card-header\">{props.data.id}</div>\n                    <p className=\"card-body\">{props.data.text}</p>\n                </>\n            )}\n        </div>\n    );\n};\n\nexport default Card;\n","import React, { useState } from \"react\";\n\nimport Card from \"./Card\";\nimport { updateList, getNextCardID } from \"../CardService\";\n\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\n\nconst List = props => {\n    const [list, setList] = useState(props.list);\n    const [isEditing, setIsEditing] = useState(false);\n\n    const handleSubmit = () => {\n        setIsEditing(false);\n        updateList(list)\n            .then(resp => {\n                console.log(resp);\n            })\n            .catch(resp => console.error(resp));\n    };\n\n    // a little function to help us with reordering the result\n    const reorder = (list, oldIndex, newIndex) => {\n        // arr.splice(index, how_many_remove, [item_to_add_at_index])\n        const result = Array.from(list); // copy original list\n        const [item] = result.splice(oldIndex, 1); // remove 1 item from old position\n        result.splice(newIndex, 0, item); // add new item to new position\n        return result;\n    };\n\n    const handleDragEnd = result => {\n        if (!result.destination) {\n            return;\n        }\n        console.log(result);\n    };\n\n    return (\n        <DragDropContext onDragEnd={handleDragEnd}>\n            <div className=\"list\">\n                {/* title */}\n                {isEditing ? (\n                    <input\n                        type=\"text\"\n                        name=\"title\"\n                        autoFocus\n                        value={list.title}\n                        onChange={e =>\n                            setList({\n                                ...list,\n                                [e.target.name]: e.target.value\n                            })\n                        }\n                        onBlur={() => handleSubmit()}\n                        onKeyPress={e => {\n                            if (e.key === \"Enter\") handleSubmit();\n                        }}\n                    />\n                ) : (\n                    <p\n                        className=\"list-title\"\n                        onClick={() => setIsEditing(true)}\n                    >\n                        {list.title}\n                    </p>\n                )}\n                {/* List of Cards */}\n                <Droppable droppableId=\"droppable\">\n                    {provided => (\n                        <div\n                            {...provided.droppableProps}\n                            ref={provided.innerRef}\n                        >\n                            {props.cards.map(card => (\n                                <Draggable\n                                    key={card.id}\n                                    draggableId={card.id}\n                                    index={0}\n                                >\n                                    {provided => (\n                                        <Card\n                                            key={card.id}\n                                            data={card}\n                                            innerRef={provided.innerRef}\n                                            provided={provided}\n                                        />\n                                    )}\n                                </Draggable>\n                            ))}\n                            {provided.placeholder}\n                        </div>\n                    )}\n                </Droppable>\n                {/* Add Card */}\n                <button\n                    className=\"btn add-card\"\n                    onClick={() => {\n                        getNextCardID().then(resp => {\n                            const newCards = [\n                                ...props.cards,\n                                {\n                                    id: resp,\n                                    text: \"...\"\n                                }\n                            ];\n                            setList({ ...list, cards: newCards });\n                            updateList({ ...list, cards: newCards }).then(\n                                resp => {\n                                    console.log(resp);\n                                }\n                            );\n                        });\n                    }}\n                >\n                    Add a new Card\n                </button>\n            </div>\n        </DragDropContext>\n    );\n};\n\nexport default List;\n","import React, { useState, useEffect } from \"react\";\n\nimport List from \"./List\";\nimport {\n    getBoard,\n    resetBoard,\n    getNextCardID,\n    getNextListID,\n    updateBoard\n} from \"../CardService\";\n\nconst Board = () => {\n    const [board, setboard] = useState(null);\n\n    useEffect(() => {\n        getBoard().then(resp => {\n            setboard(resp);\n        });\n    }, [board]);\n\n    return (\n        <div className=\"board-container\">\n            {board && (\n                <>\n                    {/* Header */}\n                    <h1 className=\"text-center\" style={{ marginTop: \"0\" }}>\n                        ssebs-kanban\n                    </h1>\n                    <h4 className=\"text-center\"\n                    style={{color:\"var(--font-lighter)\"}}>\n                        This is a simple Kanban style board, it is a work in progress at the moment.\n                    </h4>\n                    <div className=\"btn-group\">\n                        <button\n                            className=\"btn\"\n                            onClick={() => {\n                                if (!window.confirm(\"Are you sure?\")) return;\n                                resetBoard(\"default\").then(resp =>\n                                    console.log(resp)\n                                );\n                            }}\n                        >\n                            Reset the Board to the sample data\n                        </button>{\" \"}\n                        <button\n                            className=\"btn\"\n                            onClick={() => {\n                                if (!window.confirm(\"Are you sure?\")) return;\n                                resetBoard(\"empty\").then(resp =>\n                                    console.log(resp)\n                                );\n                            }}\n                        >\n                            Clear the Board\n                        </button>\n                    </div>\n                    <hr />\n                    <button\n                        className=\"btn\"\n                        onClick={() => {\n                            getNextCardID().then(cardID => {\n                                getNextListID().then(listID => {\n                                    const newList = {\n                                        id: listID,\n                                        title: \"Change me!\",\n                                        cards: [\n                                            {\n                                                id: cardID,\n                                                text: \"...\"\n                                            }\n                                        ]\n                                    };\n                                    updateBoard([...board, newList]).then(\n                                        resp => {\n                                            console.log(resp);\n                                        }\n                                    );\n                                });\n                            });\n                        }}\n                    >\n                        Add a Column\n                    </button>\n                    {/* Board of Lists */}\n                    <div className=\"board\">\n                        {board.map(list => (\n                            <List\n                                key={list.id}\n                                cards={list.cards}\n                                list={list}\n                            />\n                        ))}\n                    </div>\n                </>\n            )}\n        </div>\n    );\n};\n\nexport default Board;\n","import React from \"react\";\n\nimport Board from \"./components/Board\";\n\nconst Footer = () => {\n    return (\n        <div className=\"footer\">\n            <p>Copyright &copy;2019 Sebastian Safari</p>\n            <a href=\"https://github/com/ssebs\">GitHub</a>\n        </div>\n    );\n};\n\nfunction App() {\n    return (\n        <>\n            <Board />\n            <Footer />\n        </>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}