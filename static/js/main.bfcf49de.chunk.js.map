{"version":3,"sources":["CardService.js","components/Card.jsx","components/List.jsx","components/Board.jsx","App.jsx","serviceWorker.js","index.js"],"names":["defaultBoard","id","title","cards","text","currentBoard","Card","_ref","data","_useState","useState","_useState2","Object","slicedToArray","card","setCard","_useState3","_useState4","isEditing","setIsEditing","handleSubmit","updatedCard","Promise","resolve","reject","hasFoundCard","map","list","tmp","objectSpread","localStorage","setItem","JSON","stringify","Status","then","resp","catch","console","error","react_default","a","createElement","className","onClick","onBlur","type","name","autoFocus","value","onChange","e","defineProperty","target","onKeyPress","key","Fragment","List","components_Card","Board","board","setboard","useEffect","getItem","parse","style","marginTop","components_List","Footer","href","App","components_Board","App_Footer","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","log","onUpdate","onSuccess","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.bfcf49de.chunk.js","sourcesContent":["// CardService - helper file to handle card data between components\n\nconst defaultBoard = [\n    {\n        id: 1,\n        title: \"col 1\",\n        cards: [{ id: 1, text: \"foo\" }, { id: 2, text: \"bar\" }]\n    },\n    {\n        id: 2,\n        title: \"col 2\",\n        cards: [\n            { id: 3, text: \"test\" },\n            { id: 4, text: \"fourth thing\" },\n            { id: 5, text: \"blah\" },\n            { id: 6, text: \"dfdsf\" }\n        ]\n    },\n    {\n        id: 3,\n        title: \"col 3\",\n        cards: [\n            { id: 7, text: \"xsdfdsf\" },\n            { id: 8, text: \"sfsdff\" },\n            { id: 9, text: \"test3\" }\n        ]\n    }\n];\n\nlet currentBoard = [];\n\nexport const getBoard = () => {\n    return new Promise((resolve, reject) => {\n        if (localStorage.getItem(\"board\")) {\n            currentBoard = JSON.parse(localStorage.getItem(\"board\"));\n        } else {\n            currentBoard = defaultBoard;\n            localStorage.setItem(\"board\", JSON.stringify(defaultBoard));\n        }\n        resolve(currentBoard);\n    });\n};\n\nexport const updateCard = updatedCard => {\n    return new Promise((resolve, reject) => {\n        let hasFoundCard = false;\n        currentBoard = currentBoard.map(list => {\n            const tmp = list.cards.map(card => {\n                if (card.id === updatedCard.id) {\n                    card = { ...updatedCard };\n                    hasFoundCard = true;\n                }\n                return card;\n            });\n            return { ...list, cards: tmp };\n        });\n        if (hasFoundCard) {\n            localStorage.setItem(\"board\", JSON.stringify(currentBoard));\n            resolve({ Status: \"Updated\" });\n        } else {\n            reject({ Status: \"Could not update\" });\n        }\n    });\n};\n","import React, { useState } from \"react\";\n\nimport { updateCard } from \"../CardService\";\n\nconst Card = ({ data }) => {\n    const [card, setCard] = useState(data);\n    const [isEditing, setIsEditing] = useState(false);\n\n    const handleChange = e => {\n        setCard({ ...card, [e.target.name]: e.target.value });\n    };\n\n    const handleSubmit = () => {\n        setIsEditing(false);\n        updateCard(card)\n            .then(resp => {\n                // console.log(resp);\n            })\n            .catch(resp => console.error(resp));\n    };\n\n    return (\n        <div\n            className=\"card\"\n            onClick={() => setIsEditing(true)}\n            onBlur={() => handleSubmit()}\n        >\n            {isEditing ? (\n                <input\n                    type=\"text\"\n                    name=\"text\"\n                    autoFocus\n                    value={card.text}\n                    onChange={handleChange}\n                    onKeyPress={e => {\n                        if (e.key === \"Enter\") handleSubmit();\n                    }}\n                />\n            ) : (\n                <>\n                    <div className=\"card-header\">{data.id}</div>\n                    <p className=\"card-body\">{data.text}</p>\n                </>\n            )}\n        </div>\n    );\n};\n\nexport default Card;\n","import React from 'react'\n\nimport Card from \"./Card\"\n\nconst List = ({cards, title}) => {\n    return (\n        <div className=\"list\">\n            <p className=\"list-title\">{title}</p>\n            {\n                cards.cards.map(card => (\n                    <Card key={card.id} data={card} />\n                ))\n            }\n        </div>\n    )\n}\n\nexport default List\n","import React, { useState, useEffect } from \"react\";\n\nimport List from \"./List\";\nimport { getBoard } from \"../CardService\";\n\nconst Board = () => {\n    const [board, setboard] = useState(null);\n\n    useEffect(() => {\n        getBoard().then(resp => {\n            setboard(resp);\n        });\n    }, [board]);\n\n    return (\n        // <div className=\"board\">\n        <div className=\"board-container\">\n            {board && (\n                <>\n                    <h1 className=\"text-center\" style={{ marginTop: \"0\" }}>\n                        This is the board\n                    </h1>\n                    <div className=\"board\">\n                        {board.map(list => (\n                            <List\n                                key={list.id}\n                                cards={list}\n                                title={list.title}\n                            />\n                        ))}\n                    </div>\n                </>\n            )}\n        </div>\n    );\n};\n\nexport default Board;\n","import React from \"react\";\n\nimport Board from \"./components/Board\";\n\nconst Footer = () => {\n    return (\n        <div className=\"footer\">\n            <p>Copywrite &copy;2019 Sebastian Safari</p>\n            <a href=\"https://github/com/ssebs\">GitHub</a>\n        </div>\n    );\n};\n\nfunction App() {\n    return (\n        <>\n            <Board />\n            <Footer />\n        </>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}